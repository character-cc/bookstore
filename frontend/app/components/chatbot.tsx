"use client"

import type React from "react"
import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { MessageCircle, X, Send, Bot, Minus } from "lucide-react"
import { GoogleGenerativeAI } from "@google/generative-ai"
import ReactMarkdown from "react-markdown"

const GEMINI_API_KEY = ""

interface Message {
    id: string
    text: string
    sender: "user" | "bot"
    timestamp: Date
}

interface Book {
    isbn: string
    title: string
    price: number
    images: string[]
    authors: Array<{ id: number; name: string }>
    categories: Array<{ id: number; name: string }>
}

interface Discount {
    code: string
    description: string
}

const INITIAL_MESSAGES: Message[] = [
    {
        id: "1",
        text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI t∆∞ v·∫•n s√°ch. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s√°ch, t∆∞ v·∫•n v·ªÅ gi√° c·∫£, khuy·∫øn m√£i v√† c√°c th√¥ng tin kh√°c. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?",
        sender: "bot",
        timestamp: new Date(),
    },
]

export default function GeminiChatbot() {
    const [isOpen, setIsOpen] = useState(false)
    const [isMinimized, setIsMinimized] = useState(false)
    const [messages, setMessages] = useState<Message[]>(INITIAL_MESSAGES)
    const [inputValue, setInputValue] = useState("")
    const [isTyping, setIsTyping] = useState(false)
    const [books, setBooks] = useState<Book[]>([])
    const [discounts, setDiscounts] = useState<Discount[]>([])

    const messagesEndRef = useRef<HTMLDivElement>(null)

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
    }

    useEffect(() => {
        scrollToBottom()
    }, [messages])

    const fetchBooksAndDiscounts = async () => {
        try {
            const responseBook = await fetch("/api/books")
            const dataBook = await responseBook.json()
            setBooks(dataBook || [])
            const responseDiscounts = await fetch("/api/discounts/public")
            const dataDiscounts = await responseDiscounts.json()
            setDiscounts(dataDiscounts || [])

            console.log(dataDiscounts)
            console.log(dataBook)
        } catch (error) {
            console.error("Error fetching data:", error)
            setBooks([
                {
                    isbn: "9786043312676",
                    title: "Clean Code",
                    price: 290000,
                    images: ["http://localhost/api/uploads/ce65e430-afde-4d54-9fed-751bb8e5f690.jpg"],
                    authors: [{ id: 1, name: "Robert C. Martin" }],
                    categories: [{ id: 1, name: "L·∫≠p tr√¨nh" }],
                },
            ])
            setDiscounts([{ code: "SUMMER10", description: "Gi·∫£m 10% cho t·∫•t c·∫£ s√°ch" }])
        }
    }

    useEffect(() => {
        fetchBooksAndDiscounts()
    }, [])

    const getSystemPrompt = (): string => {
        const booksPrompt = books.map((b) => JSON.stringify(b, null, 2)).join("\n\n")
        const discountPrompt = JSON.stringify(discounts, null, 2)

        return `B·∫°n l√† tr·ª£ l√Ω t∆∞ v·∫•n s√°ch th√¥ng minh v√† th√¢n thi·ªán c·ªßa c·ª≠a h√†ng s√°ch online. 
H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, nhi·ªát t√¨nh v√† h·ªØu √≠ch (1-3 c√¢u). 
S·ª≠ d·ª•ng d·ªØ li·ªáu sau ƒë·ªÉ t∆∞ v·∫•n ch√≠nh x√°c:

DANH S√ÅCH S√ÅCH HI·ªÜN C√ì:
${booksPrompt}

M√É GI·∫¢M GI√Å HI·ªÜN T·∫†I:
${discountPrompt}

H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
- N·∫øu h·ªèi v·ªÅ s√°ch c·ª• th·ªÉ: ƒë∆∞a ra th√¥ng tin chi ti·∫øt v√† LU√îN bao g·ªìm:
  * T√™n s√°ch, gi√°, t√°c gi·∫£, m√¥ t·∫£
  * H√¨nh ·∫£nh: ![T√™n s√°ch](ƒë∆∞·ªùng_d·∫´n_h√¨nh_·∫£nh)
  * Link chi ti·∫øt: [Xem chi ti·∫øt s√°ch](http://localhost/books/{id}/detail)
  * V√≠ d·ª• format tr·∫£ l·ªùi:
    "üìö **Clean Code** - 290.000ƒë
    T√°c gi·∫£: Robert C. Martin
    
    ![Clean Code](https://example.com/image.jpg)
    
    ƒê√¢y l√† cu·ªën s√°ch tuy·ªát v·ªùi v·ªÅ l·∫≠p tr√¨nh s·∫°ch...
    
    üëâ [Xem chi ti·∫øt s√°ch](http://localhost/books/1/detail)"

- N·∫øu ƒë·ªÅ xu·∫•t nhi·ªÅu s√°ch: li·ªát k√™ t·ª´ng cu·ªën v·ªõi format tr√™n
- N·∫øu h·ªèi v·ªÅ gi·∫£m gi√°/khuy·∫øn m√£i: ƒë·ªÅ xu·∫•t m√£ ph√π h·ª£p v√† c√°ch s·ª≠ d·ª•ng
- N·∫øu h·ªèi v·ªÅ giao h√†ng: "Giao h√†ng 1-3 ng√†y l√†m vi·ªác, mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n t·ª´ 200.000ƒë"
- N·∫øu h·ªèi v·ªÅ ƒë∆°n h√†ng: "B·∫°n c√≥ th·ªÉ ki·ªÉm tra trong m·ª•c 'ƒê∆°n h√†ng c·ªßa t√¥i' ho·∫∑c li√™n h·ªá hotline 1900-xxxx"
- N·∫øu h·ªèi v·ªÅ thanh to√°n: "Ch√∫ng t√¥i h·ªó tr·ª£ thanh to√°n COD, chuy·ªÉn kho·∫£n, v√† c√°c v√≠ ƒëi·ªán t·ª≠"
- N·∫øu kh√¥ng c√≥ s√°ch ph√π h·ª£p: g·ª£i √Ω s√°ch t∆∞∆°ng t·ª± ho·∫∑c h·ªèi th√™m v·ªÅ s·ªü th√≠ch
- Lu√¥n th√¢n thi·ªán, nhi·ªát t√¨nh v√† s·∫µn s√†ng h·ªó tr·ª£ th√™m
- S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o c·∫£m gi√°c th√¢n thi·ªán

L∆ØU √ù QUAN TR·ªåNG:
- Khi ƒë·ªÅ c·∫≠p ƒë·∫øn s√°ch, LU√îN s·ª≠ d·ª•ng id t·ª´ d·ªØ li·ªáu ƒë·ªÉ t·∫°o link: http://localhost/books/{id}/detail
- H√¨nh ·∫£nh l·∫•y t·ª´ tr∆∞·ªùng images[0] trong d·ªØ li·ªáu s√°ch
- Format markdown ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp: **t√™n s√°ch**, ![alt](src), [text](link)

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n v√† d·ªÖ hi·ªÉu.`
    }

    const getAIResponse = async (userMessage: string): Promise<string> => {
        try {
            const genAI = new GoogleGenerativeAI(GEMINI_API_KEY)
            const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" })

            const result = await model.generateContent([{ text: getSystemPrompt() }, { text: userMessage }])

            const response = await result.response
            const text = response.text()

            if (!text || text.trim() === "") {
                throw new Error("Empty response from AI")
            }

            return text
        } catch (error) {
            console.error("Gemini AI Error:", error)

            if (error.message?.includes("API_KEY")) {
                return "‚ùå L·ªói x√°c th·ª±c API. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh."
            } else if (error.message?.includes("quota")) {
                return "‚ö†Ô∏è ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá hotline 1900-xxxx."
            } else {
                return "üòÖ Xin l·ªói, t√¥i ƒëang g·∫∑p ch√∫t v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá hotline 1900-xxxx ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp."
            }
        }
    }

    const sendMessage = async (text: string) => {
        if (!text.trim()) return

        const userMessage: Message = {
            id: Date.now().toString(),
            text: text.trim(),
            sender: "user",
            timestamp: new Date(),
        }

        setMessages((prev) => [...prev, userMessage])
        setInputValue("")
        setIsTyping(true)

        try {
            const botResponse = await getAIResponse(text)

            const botMessage: Message = {
                id: (Date.now() + 1).toString(),
                text: botResponse,
                sender: "bot",
                timestamp: new Date(),
            }

            setMessages((prev) => [...prev, botMessage])
        } catch (error) {
            console.error("Send message error:", error)
            const errorMessage: Message = {
                id: (Date.now() + 1).toString(),
                text: "üòî Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau.",
                sender: "bot",
                timestamp: new Date(),
            }
            setMessages((prev) => [...prev, errorMessage])
        } finally {
            setIsTyping(false)
        }
    }

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault()
        sendMessage(inputValue)
    }

    const formatTime = (date: Date) => {
        return date.toLocaleTimeString("vi-VN", {
            hour: "2-digit",
            minute: "2-digit",
        })
    }

    const resetChat = () => {
        setMessages(INITIAL_MESSAGES)
    }

    if (!isOpen) {
        return (
            <div className="fixed bottom-4 right-4 z-50">
                <Button
                    onClick={() => setIsOpen(true)}
                    className="h-12 w-12 rounded-full bg-blue-600 hover:bg-blue-700 shadow-lg transition-all duration-200 hover:scale-105"
                    size="icon"
                >
                    <MessageCircle className="h-5 w-5 text-white" />
                </Button>
            </div>
        )
    }

    return (
        <div className="fixed bottom-4 right-4 z-50">
            <Card className={`w-96 shadow-xl border transition-all duration-300 ${isMinimized ? "h-12" : "h-[32rem]"}`}>
                {/* Header */}
                <CardHeader className="p-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-t-lg">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                            <Bot className="h-4 w-4" />
                            <span className="text-sm font-medium">AI T∆∞ v·∫•n s√°ch</span>
                            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" title="AI ƒëang ho·∫°t ƒë·ªông"></div>
                        </div>
                        <div className="flex items-center gap-1">
                            <Button
                                variant="ghost"
                                size="icon"
                                className="h-6 w-6 text-white hover:bg-blue-800 transition-colors"
                                onClick={() => setIsMinimized(!isMinimized)}
                                title={isMinimized ? "M·ªü r·ªông" : "Thu nh·ªè"}
                            >
                                <Minus className="h-3 w-3" />
                            </Button>
                            <Button
                                variant="ghost"
                                size="icon"
                                className="h-6 w-6 text-white hover:bg-blue-800 transition-colors"
                                onClick={() => setIsOpen(false)}
                                title="ƒê√≥ng"
                            >
                                <X className="h-3 w-3" />
                            </Button>
                        </div>
                    </div>
                </CardHeader>

                {!isMinimized && (
                    <>
                        {/* Messages */}
                        <CardContent className="p-0 h-80 overflow-y-auto bg-gray-50">
                            <div className="p-3 space-y-3">
                                {messages.map((message) => (
                                    <div
                                        key={message.id}
                                        className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}
                                    >
                                        <div
                                            className={`max-w-[85%] rounded-lg px-3 py-2 text-sm shadow-sm ${
                                                message.sender === "user"
                                                    ? "bg-blue-600 text-white"
                                                    : "bg-white text-gray-800 border border-gray-200"
                                            }`}
                                        >
                                            <div className="prose prose-sm max-w-none">
                                                {message.sender === "bot" ? (
                                                    <ReactMarkdown
                                                        components={{
                                                            img: ({ src, alt }) => (
                                                                <img
                                                                    src={src || "/placeholder.svg"}
                                                                    alt={alt || ""}
                                                                    className="max-w-32 h-auto rounded-lg my-2 border shadow-sm block"
                                                                    style={{ maxWidth: "128px", minWidth: "80px" }}
                                                                    // onError={(e) => {
                                                                    //     e.currentTarget.src = "/placeholder.svg?height=120&width=80"
                                                                    // }}
                                                                />
                                                            ),
                                                            a: ({ href, children }) => (
                                                                <a
                                                                    href={href}
                                                                    target="_blank"
                                                                    rel="noopener noreferrer"
                                                                    className="text-blue-600 hover:text-blue-800 underline font-medium"
                                                                >
                                                                    {children}
                                                                </a>
                                                            ),
                                                            strong: ({ children }) => <strong className="font-bold">{children}</strong>,
                                                            p: ({ children }) => <p className="mb-2 last:mb-0">{children}</p>,
                                                        }}
                                                    >
                                                        {message.text}
                                                    </ReactMarkdown>
                                                ) : (
                                                    <p className="whitespace-pre-wrap">{message.text}</p>
                                                )}
                                            </div>
                                            <p className={`text-xs mt-1 ${message.sender === "user" ? "text-blue-100" : "text-gray-500"}`}>
                                                {formatTime(message.timestamp)}
                                            </p>
                                        </div>
                                    </div>
                                ))}

                                {isTyping && (
                                    <div className="flex justify-start">
                                        <div className="bg-white border border-gray-200 rounded-lg px-3 py-2 max-w-[75%] shadow-sm">
                                            <div className="flex items-center gap-2">
                                                <Bot className="h-3 w-3 text-blue-600" />
                                                <div className="flex space-x-1">
                                                    <div className="w-1.5 h-1.5 bg-blue-400 rounded-full animate-bounce"></div>
                                                    <div
                                                        className="w-1.5 h-1.5 bg-blue-400 rounded-full animate-bounce"
                                                        style={{ animationDelay: "0.1s" }}
                                                    ></div>
                                                    <div
                                                        className="w-1.5 h-1.5 bg-blue-400 rounded-full animate-bounce"
                                                        style={{ animationDelay: "0.2s" }}
                                                    ></div>
                                                </div>
                                                <span className="text-xs text-gray-500">AI ƒëang suy nghƒ©...</span>
                                            </div>
                                        </div>
                                    </div>
                                )}

                                <div ref={messagesEndRef} />
                            </div>
                        </CardContent>

                        {/* Input */}
                        <div className="p-3 border-t bg-white rounded-b-lg">
                            <form onSubmit={handleSubmit} className="flex gap-2">
                                <Input
                                    value={inputValue}
                                    onChange={(e) => setInputValue(e.target.value)}
                                    placeholder="H·ªèi AI v·ªÅ s√°ch, gi√°, khuy·∫øn m√£i..."
                                    className="flex-1 text-sm border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                                    disabled={isTyping}
                                    maxLength={500}
                                />
                                <Button
                                    type="submit"
                                    size="icon"
                                    className="h-9 w-9 bg-blue-600 hover:bg-blue-700 transition-colors"
                                    disabled={!inputValue.trim() || isTyping}
                                    title="G·ª≠i tin nh·∫Øn"
                                >
                                    <Send className="h-4 w-4" />
                                </Button>
                            </form>

                            <div className="flex gap-1 mt-2">
                                <Button
                                    variant="ghost"
                                    size="sm"
                                    className="text-xs text-gray-500 hover:text-blue-600 p-1 h-auto"
                                    onClick={resetChat}
                                    disabled={isTyping}
                                >
                                    L√†m m·ªõi
                                </Button>
                                <Button
                                    variant="ghost"
                                    size="sm"
                                    className="text-xs text-gray-500 hover:text-blue-600 p-1 h-auto"
                                    onClick={() => sendMessage("C√≥ nh·ªØng s√°ch g√¨ hay?")}
                                    disabled={isTyping}
                                >
                                    S√°ch hay
                                </Button>
                                <Button
                                    variant="ghost"
                                    size="sm"
                                    className="text-xs text-gray-500 hover:text-blue-600 p-1 h-auto"
                                    onClick={() => sendMessage("C√≥ khuy·∫øn m√£i g√¨ kh√¥ng?")}
                                    disabled={isTyping}
                                >
                                    Khuy·∫øn m√£i
                                </Button>
                            </div>
                        </div>
                    </>
                )}
            </Card>
        </div>
    )
}
